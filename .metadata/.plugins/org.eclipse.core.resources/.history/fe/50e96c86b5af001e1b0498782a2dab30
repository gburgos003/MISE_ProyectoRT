/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "string.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

UART_HandleTypeDef huart2;

/* Definitions for taskEjecutarCmd */
osThreadId_t taskEjecutarCmdHandle;
const osThreadAttr_t taskEjecutarCmd_attributes = {
  .name = "taskEjecutarCmd",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for taskLeerADC */
osThreadId_t taskLeerADCHandle;
const osThreadAttr_t taskLeerADC_attributes = {
  .name = "taskLeerADC",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityRealtime,
};
/* Definitions for taskEnvioUART */
osThreadId_t taskEnvioUARTHandle;
const osThreadAttr_t taskEnvioUART_attributes = {
  .name = "taskEnvioUART",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for taskConnectionC */
osThreadId_t taskConnectionCHandle;
const osThreadAttr_t taskConnectionC_attributes = {
  .name = "taskConnectionC",
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityLow,
};
/* Definitions for colaCmd */
osMessageQueueId_t colaCmdHandle;
const osMessageQueueAttr_t colaCmd_attributes = {
  .name = "colaCmd"
};
/* Definitions for mutexAdc */
osMutexId_t mutexAdcHandle;
const osMutexAttr_t mutexAdc_attributes = {
  .name = "mutexAdc"
};
/* Definitions for mutexBuffer */
osMutexId_t mutexBufferHandle;
const osMutexAttr_t mutexBuffer_attributes = {
  .name = "mutexBuffer"
};
/* Definitions for systemFlags */
osEventFlagsId_t systemFlagsHandle;
const osEventFlagsAttr_t systemFlags_attributes = {
  .name = "systemFlags"
};
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM4_Init(void);
void StartTaskEjecutarCmd(void *argument);
void StartTaskLeerADC(void *argument);
void StartTaskEnvioUART(void *argument);
void StartTaskConnectionCheck(void *argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t bufferAdc[1024];
uint8_t buffer_commands[2];
int connection_status;

//int uart_time = 10;
int uart_time = 5000;
int n_samples = 1;
int sample_time = 25;

typedef enum {
	INVALID = 0,
	SET_UART_TIME,
	SET_SAMPLE_TIME,
	SET_MODE,
	CONNECTION_STATUS
} command_id;

typedef struct command {
	command_id type;
	uint8_t arg;
} command;

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_TIM3_Init();
  MX_TIM4_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
  /* Create the mutex(es) */
  /* creation of mutexAdc */
  mutexAdcHandle = osMutexNew(&mutexAdc_attributes);

  /* creation of mutexBuffer */
  mutexBufferHandle = osMutexNew(&mutexBuffer_attributes);

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of colaCmd */
  colaCmdHandle = osMessageQueueNew (32, sizeof(command), &colaCmd_attributes);

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskEjecutarCmd */
  taskEjecutarCmdHandle = osThreadNew(StartTaskEjecutarCmd, NULL, &taskEjecutarCmd_attributes);

  /* creation of taskLeerADC */
  taskLeerADCHandle = osThreadNew(StartTaskLeerADC, NULL, &taskLeerADC_attributes);

  /* creation of taskEnvioUART */
  taskEnvioUARTHandle = osThreadNew(StartTaskEnvioUART, NULL, &taskEnvioUART_attributes);

  /* creation of taskConnectionC */
  taskConnectionCHandle = osThreadNew(StartTaskConnectionCheck, NULL, &taskConnectionC_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of systemFlags */
  systemFlagsHandle = osEventFlagsNew(&systemFlags_attributes);

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  HAL_UART_Receive_IT(&huart2, buffer_commands, 2);
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 84-1;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 100;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 84-1;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 2500;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 1000;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
	static int index_sample = 0;
	uint16_t dato;

	dato = HAL_ADC_GetValue(&hadc1);

	osMutexAcquire(mutexBufferHandle, osWaitForever);
	bufferAdc[index_sample] = dato;
	osMutexRelease(mutexBufferHandle);

	index_sample++;
	if (index_sample == n_samples) {
	  index_sample = 0;
//	  HAL_ADC_Stop_IT(&hadc1);
	  HAL_TIM_Base_Stop_IT(&htim3);
	  osEventFlagsSet(systemFlagsHandle, BUFFER_FULL_FLAG);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	// DECODIFICAR MENSAJE RECIBIDO
	// TODO
	command cmd;
	int cmd_valid = 1;

	switch (buffer_commands[0]) {
	case 'U':
		cmd.type = SET_UART_TIME;
		break;
	case 'T':
		cmd.type = SET_SAMPLE_TIME;
		break;
	case 'M':
		cmd.type = SET_MODE;
		break;
	case 'C':
		cmd.type = CONNECTION_STATUS;
		break;
	default:
		cmd_valid = 0;
		break;
	}

	// METER CMD A LA COLA
	if (cmd_valid) {
		cmd.arg = buffer_commands[1];
		osMessageQueuePut(colaCmdHandle, &cmd, 0, 0);
	}

	HAL_UART_Receive_IT(&huart2, buffer_commands, sizeof(buffer_commands));
}


/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartTaskEjecutarCmd */
/**
  * @brief  Function implementing the taskEjecutarCmd thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskEjecutarCmd */
void StartTaskEjecutarCmd(void *argument)
{
  /* USER CODE BEGIN 5 */
	osStatus_t status;
	command cmd;

  /* Infinite loop */
  for(;;)
  {
	  // SACAR CMD DE LA COLA
	  osMessageQueueGet(colaCmdHandle, &cmd, 0, osWaitForever);

	  switch (cmd.type) {
	  case SET_UART_TIME:
		  uart_time = cmd.arg;
		  break;
	  case SET_SAMPLE_TIME:
		  sample_time = cmd.arg;

		  // status = osMutexAcquire(mutexAdcHandle, osWaitForever);

		  // APAGAR TIMER
		  HAL_TIM_Base_Stop_IT(&htim3);
		  // CONFIG TIMER
		  __HAL_TIM_SET_COUNTER(&htim3,0);
		  __HAL_TIM_SET_AUTORELOAD(&htim3,sample_time);

		  // ENCENDER TIMER
		  HAL_TIM_Base_Start_IT(&htim3);

		  // status = osMutexRelease(mutexAdcHandle);

		  break;
	  case SET_MODE:
		  if (cmd.arg == 0){
			  n_samples = 100;
			  uart_time = 2000;
		  }
		  else if (cmd.arg == 1){
			  n_samples = 1;
		  }
		  else{
			  //TRIGGER MODE
		  }
		  break;

	  case CONNECTION_STATUS:
		  if (cmd.arg == 1) {
			  connection_status++;
		  } else {
			  connection_status = 0;
		  }
		  osEventFlagsSet(systemFlagsHandle, CONNECTION_STATUS_FLAG);
		  break;
	  default:
		  break;
	  }

	 osDelay(10);
  }
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_StartTaskLeerADC */
/**
* @brief Function implementing the taskLeerADC thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskLeerADC */
void StartTaskLeerADC(void *argument)
{
  /* USER CODE BEGIN StartTaskLeerADC */
  /* Infinite loop */

	for(;;)
	{
		HAL_TIM_Base_Start_IT(&htim3);
		osDelay(uart_time);
	}
  /* USER CODE END StartTaskLeerADC */
}

/* USER CODE BEGIN Header_StartTaskEnvioUART */
/**
* @brief Function implementing the taskEnvioUART thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskEnvioUART */
void StartTaskEnvioUART(void *argument)
{
  /* USER CODE BEGIN StartTaskEnvioUART */
	char mensaje[202];
	osStatus_t status;

	/* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(systemFlagsHandle, BUFFER_FULL_FLAG, osFlagsNoClear, osWaitForever);
	  osEventFlagsClear(systemFlagsHandle, BUFFER_FULL_FLAG);

	  mensaje[0] = 0xFE;
	  mensaje[1] = 0xFE;
	  mensaje[n_samples * 2 + 2] = 0xFF;
	  mensaje[n_samples * 2 + 3] = 0xFF;
//	  mensaje[n_samples * 2 + 1] = 0xFF;

	  status = osMutexAcquire(mutexBufferHandle, osWaitForever);
	  memcpy(&mensaje[2], (uint8_t *) bufferAdc, n_samples * 2);
	  status = osMutexRelease(mutexBufferHandle);

	  HAL_UART_Transmit(&huart2, (uint8_t *) mensaje, n_samples * 2 + 4, osWaitForever);

	  osDelay(1);

  }
  /* USER CODE END StartTaskEnvioUART */
}

/* USER CODE BEGIN Header_StartTaskConnectionCheck */
/**
* @brief Function implementing the taskConnectionC thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskConnectionCheck */
void StartTaskConnectionCheck(void *argument)
{
  /* USER CODE BEGIN StartTaskConnectionCheck */
  /* Infinite loop */
	int status_anterior = connection_status;
  for(;;)
  {
	  osEventFlagsWait(systemFlagsHandle, CONNECTION_STATUS_FLAG, osFlagsWaitAny, 2100);
	  osEventFlagsClear(systemFlagsHandle, CONNECTION_STATUS_FLAG);

	  if (status_anterior < connection_status) {
		  // LED VERDE
		  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
	  } else {
		  // LED ROJO
		  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
		  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
	  }
	  status_anterior = connection_status;
  }
  /* USER CODE END StartTaskConnectionCheck */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
